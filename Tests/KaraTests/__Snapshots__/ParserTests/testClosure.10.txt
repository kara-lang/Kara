SyntaxNode(
  leadingTrivia: [],
  content: 0:0-3:0 Expr(
    payload: Expr.Payload.closure(
      Closure(
        openBrace: SyntaxNode(
          leadingTrivia: [],
          content: 0:0-0:0 ()
        ),
        parameters: [
          [0]: Closure.Parameter(
            identifier: SyntaxNode(
              leadingTrivia: [],
              content: 0:1-0:1 Identifier(value: "x")
            ),
            typeSignature: nil,
            comma: SyntaxNode(
              leadingTrivia: [],
              content: 0:2-0:2 ()
            )
          ),
          [1]: Closure.Parameter(
            identifier: SyntaxNode(
              leadingTrivia: [],
              content: 0:3-0:3 Identifier(value: "y")
            ),
            typeSignature: nil,
            comma: SyntaxNode(
              leadingTrivia: [],
              content: 0:4-0:4 ()
            )
          ),
          [2]: Closure.Parameter(
            identifier: SyntaxNode(
              leadingTrivia: [],
              content: 0:5-0:5 Identifier(value: "z")
            ),
            typeSignature: nil,
            comma: nil
          )
        ],
        inKeyword: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:7-0:8 ()
        ),
        body: [
          [0]: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("\n    ")
            ],
            content: 1:4-1:23 ExprBlock.Element.declaration(
              Declaration.binding(
                BindingDecl(
                  modifiers: [],
                  bindingKeyword: SyntaxNode(
                    leadingTrivia: [],
                    content: 1:4-1:6 ()
                  ),
                  identifier: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 1:8-1:8 Identifier(value: "a")
                  ),
                  typeSignature: nil,
                  value: BindingDecl.Value(
                    equalsSign: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 1:10-1:10 ()
                    ),
                    expr: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 1:12-1:23 Expr(
                        payload: Expr.Payload.application(
                          FuncApplication(
                            function: SyntaxNode(
                              leadingTrivia: [
                                [0]: Whitespace(" ")
                              ],
                              content: 1:12-1:14 Expr(
                                payload: Expr.Payload.identifier(
                                  Identifier(value: "sum")
                                ),
                                annotation: EmptyAnnotation()
                              )
                            ),
                            arguments: DelimitedSequence(
                              start: SyntaxNode(
                                leadingTrivia: [],
                                content: 1:15-1:15 ()
                              ),
                              elements: [
                                [0]: DelimitedSequence.Element(
                                  content: SyntaxNode(
                                    leadingTrivia: [],
                                    content: 1:16-1:16 Expr(
                                      payload: Expr.Payload.identifier(
                                        Identifier(value: "x")
                                      ),
                                      annotation: EmptyAnnotation()
                                    )
                                  ),
                                  separator: SyntaxNode(
                                    leadingTrivia: [],
                                    content: 1:17-1:17 ()
                                  )
                                ),
                                [1]: DelimitedSequence.Element(
                                  content: SyntaxNode(
                                    leadingTrivia: [
                                      [0]: Whitespace(" ")
                                    ],
                                    content: 1:19-1:19 Expr(
                                      payload: Expr.Payload.identifier(
                                        Identifier(value: "y")
                                      ),
                                      annotation: EmptyAnnotation()
                                    )
                                  ),
                                  separator: SyntaxNode(
                                    leadingTrivia: [],
                                    content: 1:20-1:20 ()
                                  )
                                ),
                                [2]: DelimitedSequence.Element(
                                  content: SyntaxNode(
                                    leadingTrivia: [
                                      [0]: Whitespace(" ")
                                    ],
                                    content: 1:22-1:22 Expr(
                                      payload: Expr.Payload.identifier(
                                        Identifier(value: "z")
                                      ),
                                      annotation: EmptyAnnotation()
                                    )
                                  ),
                                  separator: nil
                                )
                              ],
                              end: SyntaxNode(
                                leadingTrivia: [],
                                content: 1:23-1:23 ()
                              )
                            )
                          )
                        ),
                        annotation: EmptyAnnotation()
                      )
                    )
                  )
                )
              )
            )
          ),
          [1]: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("    ")
            ],
            content: 2:4-2:4 ExprBlock.Element.expr(
              Expr(
                payload: Expr.Payload.identifier(
                  Identifier(value: "a")
                ),
                annotation: EmptyAnnotation()
              )
            )
          )
        ],
        closeBrace: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace("\n")
          ],
          content: 3:0-3:0 ()
        )
      )
    ),
    annotation: EmptyAnnotation()
  )
)