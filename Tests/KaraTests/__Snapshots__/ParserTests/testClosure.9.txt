SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:11 Expr.closure(
    Closure(
      openBrace: SyntaxNode(
        leadingTrivia: [],
        content: 0:0-0:0 ()
      ),
      parameters: [
        [0]: Closure.Parameter(
          identifier: SyntaxNode(
            leadingTrivia: [],
            content: 0:1-0:1 Identifier(value: "x")
          ),
          typeAnnotation: nil,
          comma: SyntaxNode(
            leadingTrivia: [],
            content: 0:2-0:2 ()
          )
        ),
        [1]: Closure.Parameter(
          identifier: SyntaxNode(
            leadingTrivia: [],
            content: 0:3-0:3 Identifier(value: "y")
          ),
          typeAnnotation: nil,
          comma: SyntaxNode(
            leadingTrivia: [],
            content: 0:4-0:4 ()
          )
        ),
        [2]: Closure.Parameter(
          identifier: SyntaxNode(
            leadingTrivia: [],
            content: 0:5-0:5 Identifier(value: "z")
          ),
          typeAnnotation: nil,
          comma: nil
        )
      ],
      inKeyword: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:7-0:8 ()
      ),
      body: [
        [0]: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:10-0:10 ExprBlock.Element.expr(
            Expr.literal(
              Literal.int32(1)
            )
          )
        )
      ],
      closeBrace: SyntaxNode(
        leadingTrivia: [],
        content: 0:11-0:11 ()
      )
    )
  )
)