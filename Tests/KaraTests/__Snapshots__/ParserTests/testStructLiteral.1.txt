SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:24 Expr(
    payload: Expr.Payload.structLiteral(
      StructLiteral(
        type: SyntaxNode(
          leadingTrivia: [],
          content: 0:0-0:0 Expr(
            payload: Expr.Payload.identifier(
              Identifier(value: "S")
            ),
            annotation: EmptyAnnotation()
          )
        ),
        elements: DelimitedSequence(
          start: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace(" ")
            ],
            content: 0:2-0:2 ()
          ),
          elements: [
            [0]: DelimitedSequence.Element(
              content: SyntaxNode(
                leadingTrivia: [],
                content: 0:3-0:6 StructLiteral.Element(
                  property: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:3-0:3 Identifier(value: "a")
                  ),
                  colon: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:4-0:4 ()
                  ),
                  value: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:6-0:6 Expr(
                      payload: Expr.Payload.literal(
                        Literal.int32(5)
                      ),
                      annotation: EmptyAnnotation()
                    )
                  )
                )
              ),
              separator: SyntaxNode(
                leadingTrivia: [],
                content: 0:7-0:7 ()
              )
            ),
            [1]: DelimitedSequence.Element(
              content: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace(" ")
                ],
                content: 0:9-0:15 StructLiteral.Element(
                  property: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:9-0:9 Identifier(value: "b")
                  ),
                  colon: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:10-0:10 ()
                  ),
                  value: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:12-0:15 Expr(
                      payload: Expr.Payload.literal(
                        Literal.bool(true)
                      ),
                      annotation: EmptyAnnotation()
                    )
                  )
                )
              ),
              separator: SyntaxNode(
                leadingTrivia: [],
                content: 0:16-0:16 ()
              )
            ),
            [2]: DelimitedSequence.Element(
              content: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace(" ")
                ],
                content: 0:18-0:23 StructLiteral.Element(
                  property: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:18-0:18 Identifier(value: "c")
                  ),
                  colon: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:19-0:19 ()
                  ),
                  value: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:21-0:23 Expr(
                      payload: Expr.Payload.literal(
                        Literal.string("c")
                      ),
                      annotation: EmptyAnnotation()
                    )
                  )
                )
              ),
              separator: nil
            )
          ],
          end: SyntaxNode(
            leadingTrivia: [],
            content: 0:24-0:24 ()
          )
        )
      )
    ),
    annotation: EmptyAnnotation()
  )
)