SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:23 Expr(
    payload: Expr.Payload.member(
      MemberAccess(
        base: SyntaxNode(
          leadingTrivia: [],
          content: 0:0-0:11 Expr(
            payload: Expr.Payload.tuple(
              DelimitedSequence(
                start: SyntaxNode(
                  leadingTrivia: [],
                  content: 0:0-0:0 ()
                ),
                elements: [
                  [0]: DelimitedSequence.Element(
                    content: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:2-0:2 Expr(
                        payload: Expr.Payload.literal(
                          Literal.int32(1)
                        ),
                        annotation: EmptyAnnotation()
                      )
                    ),
                    separator: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:4-0:4 ()
                    )
                  ),
                  [1]: DelimitedSequence.Element(
                    content: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:6-0:6 Expr(
                        payload: Expr.Payload.literal(
                          Literal.int32(2)
                        ),
                        annotation: EmptyAnnotation()
                      )
                    ),
                    separator: SyntaxNode(
                      leadingTrivia: [],
                      content: 0:7-0:7 ()
                    )
                  ),
                  [2]: DelimitedSequence.Element(
                    content: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:9-0:9 Expr(
                        payload: Expr.Payload.literal(
                          Literal.int32(3)
                        ),
                        annotation: EmptyAnnotation()
                      )
                    ),
                    separator: nil
                  )
                ],
                end: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 0:11-0:11 ()
                )
              )
            ),
            annotation: EmptyAnnotation()
          )
        ),
        dot: SyntaxNode(
          leadingTrivia: [],
          content: 0:12-0:12 ()
        ),
        member: SyntaxNode(
          leadingTrivia: [],
          content: 0:13-0:23 Member.identifier(
            Identifier(value: "description")
          )
        )
      )
    ),
    annotation: EmptyAnnotation()
  )
)