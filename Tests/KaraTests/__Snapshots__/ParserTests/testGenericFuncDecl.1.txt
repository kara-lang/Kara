SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:25 FuncDecl(
    modifiers: [],
    funcKeyword: SyntaxNode(
      leadingTrivia: [],
      content: 0:0-0:3 ()
    ),
    identifier: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:5-0:5 Identifier(value: "f")
    ),
    genericParameters: DelimitedSequence(
      start: SyntaxNode(
        leadingTrivia: [],
        content: 0:6-0:6 ()
      ),
      elements: [
        [0]: DelimitedSequence.Element(
          content: SyntaxNode(
            leadingTrivia: [],
            content: 0:7-0:7 Identifier(value: "T")
          ),
          separator: nil
        )
      ],
      end: SyntaxNode(
        leadingTrivia: [],
        content: 0:8-0:8 ()
      )
    ),
    parameters: DelimitedSequence(
      start: SyntaxNode(
        leadingTrivia: [],
        content: 0:9-0:9 ()
      ),
      elements: [
        [0]: DelimitedSequence.Element(
          content: SyntaxNode(
            leadingTrivia: [],
            content: 0:10-0:13 FuncDecl.Parameter(
              externalName: nil,
              internalName: SyntaxNode(
                leadingTrivia: [],
                content: 0:10-0:10 Identifier(value: "x")
              ),
              colon: SyntaxNode(
                leadingTrivia: [],
                content: 0:11-0:11 ()
              ),
              type: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace(" ")
                ],
                content: 0:13-0:13 Expr(
                  payload: Expr.Payload.identifier(
                    Identifier(value: "T")
                  ),
                  annotation: EmptyAnnotation()
                )
              )
            )
          ),
          separator: nil
        )
      ],
      end: SyntaxNode(
        leadingTrivia: [],
        content: 0:14-0:14 ()
      )
    ),
    arrow: FuncDecl.Arrow(
      arrowSymbol: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:16-0:17 ()
      ),
      returns: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:19-0:19 Expr(
          payload: Expr.Payload.identifier(
            Identifier(value: "T")
          ),
          annotation: EmptyAnnotation()
        )
      )
    ),
    genericConstraints: nil,
    body: ExprBlock(
      openBrace: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:21-0:21 ()
      ),
      elements: [
        [0]: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:23-0:23 ExprBlock.Element.expr(
            Expr(
              payload: Expr.Payload.identifier(
                Identifier(value: "x")
              ),
              annotation: EmptyAnnotation()
            )
          )
        )
      ],
      closeBrace: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:25-0:25 ()
      )
    )
  )
)