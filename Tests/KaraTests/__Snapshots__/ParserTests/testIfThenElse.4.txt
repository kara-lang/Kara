SyntaxNode(
  leadingTrivia: [],
  content: 0:0-4:0 Expr(
    payload: Expr.Payload.ifThenElse(
      IfThenElse(
        ifKeyword: SyntaxNode(
          leadingTrivia: [],
          content: 0:0-0:1 ()
        ),
        condition: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:3-0:16 Expr(
            payload: Expr.Payload.application(
              FuncApplication(
                function: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 0:3-0:14 Expr(
                    payload: Expr.Payload.member(
                      MemberAccess(
                        base: SyntaxNode(
                          leadingTrivia: [
                            [0]: Whitespace(" ")
                          ],
                          content: 0:3-0:4 Expr(
                            payload: Expr.Payload.literal(
                              Literal.int32(42)
                            ),
                            annotation: EmptyAnnotation()
                          )
                        ),
                        dot: SyntaxNode(
                          leadingTrivia: [],
                          content: 0:5-0:5 ()
                        ),
                        member: SyntaxNode(
                          leadingTrivia: [],
                          content: 0:6-0:14 Member.identifier(
                            Identifier(value: "isInteger")
                          )
                        )
                      )
                    ),
                    annotation: EmptyAnnotation()
                  )
                ),
                arguments: DelimitedSequence(
                  start: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:15-0:15 ()
                  ),
                  elements: [],
                  end: SyntaxNode(
                    leadingTrivia: [],
                    content: 0:16-0:16 ()
                  )
                )
              )
            ),
            annotation: EmptyAnnotation()
          )
        ),
        thenBlock: ExprBlock(
          openBrace: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace(" ")
            ],
            content: 0:18-0:18 ()
          ),
          elements: [
            [0]: SyntaxNode(
              leadingTrivia: [
                [0]: Whitespace("\n  ")
              ],
              content: 1:2-1:13 ExprBlock.Element.expr(
                Expr(
                  payload: Expr.Payload.literal(
                    Literal.string("is integer")
                  ),
                  annotation: EmptyAnnotation()
                )
              )
            )
          ],
          closeBrace: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("\n")
            ],
            content: 2:0-2:0 ()
          )
        ),
        elseBranch: IfThenElse.ElseBranch(
          elseKeyword: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace(" ")
            ],
            content: 2:2-2:5 ()
          ),
          elseBlock: ExprBlock(
            openBrace: SyntaxNode(
              leadingTrivia: [
                [0]: Whitespace(" ")
              ],
              content: 2:7-2:7 ()
            ),
            elements: [
              [0]: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace("\n  ")
                ],
                content: 3:2-3:17 ExprBlock.Element.expr(
                  Expr(
                    payload: Expr.Payload.literal(
                      Literal.string("is not integer")
                    ),
                    annotation: EmptyAnnotation()
                  )
                )
              )
            ],
            closeBrace: SyntaxNode(
              leadingTrivia: [
                [0]: Whitespace("\n")
              ],
              content: 4:0-4:0 ()
            )
          )
        )
      )
    ),
    annotation: EmptyAnnotation()
  )
)