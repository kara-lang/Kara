SyntaxNode(
  leadingTrivia: [],
  content: 0:0-4:0 EnumDecl(
    modifiers: [],
    enumKeyword: SyntaxNode(
      leadingTrivia: [],
      content: 0:0-0:3 ()
    ),
    identifier: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:5-0:9 Identifier(value: "Cases")
    ),
    declarations: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:11-4:0 DeclBlock(
        openBrace: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:11-0:11 ()
        ),
        elements: [
          [0]: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("\n  ")
            ],
            content: 1:2-1:7 Declaration.enumCase(
              EnumCase(
                modifiers: [],
                caseKeyword: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace("\n  ")
                  ],
                  content: 1:2-1:5 ()
                ),
                identifier: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 1:7-1:7 Identifier(value: "a")
                ),
                associatedValues: nil
              )
            )
          ),
          [1]: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("    "),
              [1]: Comment(
                kind: Comment.Kind.singleLine,
                isDocComment: false,
                content: " `a` comment"
              ),
              [2]: Whitespace("\n  ")
            ],
            content: 2:2-2:19 Declaration.enumCase(
              EnumCase(
                modifiers: [],
                caseKeyword: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace("    "),
                    [1]: Comment(
                      kind: Comment.Kind.singleLine,
                      isDocComment: false,
                      content: " `a` comment"
                    ),
                    [2]: Whitespace("\n  ")
                  ],
                  content: 2:2-2:5 ()
                ),
                identifier: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 2:7-2:7 Identifier(value: "b")
                ),
                associatedValues: DelimitedSequence(
                  start: SyntaxNode(
                    leadingTrivia: [
                      [0]: Comment(
                        kind: Comment.Kind.multipleLines,
                        isDocComment: false,
                        content: "bb"
                      )
                    ],
                    content: 2:14-2:14 ()
                  ),
                  elements: [
                    [0]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [],
                        content: 2:15-2:18 Expr(
                          payload: Expr.Payload.identifier(
                            Identifier(value: "Bool")
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: nil
                    )
                  ],
                  end: SyntaxNode(
                    leadingTrivia: [],
                    content: 2:19-2:19 ()
                  )
                )
              )
            )
          ),
          [2]: SyntaxNode(
            leadingTrivia: [
              [0]: Whitespace("   "),
              [1]: Comment(
                kind: Comment.Kind.singleLine,
                isDocComment: false,
                content: " `b` comment"
              ),
              [2]: Whitespace("\n  ")
            ],
            content: 3:2-3:31 Declaration.enumCase(
              EnumCase(
                modifiers: [],
                caseKeyword: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace("   "),
                    [1]: Comment(
                      kind: Comment.Kind.singleLine,
                      isDocComment: false,
                      content: " `b` comment"
                    ),
                    [2]: Whitespace("\n  ")
                  ],
                  content: 3:2-3:5 ()
                ),
                identifier: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 3:7-3:7 Identifier(value: "c")
                ),
                associatedValues: DelimitedSequence(
                  start: SyntaxNode(
                    leadingTrivia: [],
                    content: 3:8-3:8 ()
                  ),
                  elements: [
                    [0]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [],
                        content: 3:9-3:11 Expr(
                          payload: Expr.Payload.identifier(
                            Identifier(value: "Int")
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: SyntaxNode(
                        leadingTrivia: [
                          [0]: Comment(
                            kind: Comment.Kind.multipleLines,
                            isDocComment: false,
                            content: "c1"
                          )
                        ],
                        content: 3:18-3:18 ()
                      )
                    ),
                    [1]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Comment(
                            kind: Comment.Kind.multipleLines,
                            isDocComment: false,
                            content: "c2"
                          )
                        ],
                        content: 3:25-3:30 Expr(
                          payload: Expr.Payload.identifier(
                            Identifier(value: "String")
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: nil
                    )
                  ],
                  end: SyntaxNode(
                    leadingTrivia: [],
                    content: 3:31-3:31 ()
                  )
                )
              )
            )
          )
        ],
        closeBrace: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" "),
            [1]: Comment(
              kind: Comment.Kind.singleLine,
              isDocComment: false,
              content: " `c` comment"
            ),
            [2]: Whitespace("\n")
          ],
          content: 4:0-4:0 ()
        )
      )
    )
  )
)