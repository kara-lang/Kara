SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:36 Expr(
    payload: Expr.Payload.member(
      MemberAccess(
        base: SyntaxNode(
          leadingTrivia: [],
          content: 0:0-0:24 Expr(
            payload: Expr.Payload.application(
              FuncApplication(
                function: SyntaxNode(
                  leadingTrivia: [],
                  content: 0:0-0:11 Expr(
                    payload: Expr.Payload.closure(
                      Closure(
                        openBrace: SyntaxNode(
                          leadingTrivia: [],
                          content: 0:0-0:0 ()
                        ),
                        parameters: Closure.Parameters.undelimited(
                          [
                            [0]: UndelimitedClosureParameter(
                              identifier: SyntaxNode(
                                leadingTrivia: [],
                                content: 0:1-0:1 Identifier(value: "x")
                              ),
                              comma: SyntaxNode(
                                leadingTrivia: [],
                                content: 0:2-0:2 ()
                              )
                            ),
                            [1]: UndelimitedClosureParameter(
                              identifier: SyntaxNode(
                                leadingTrivia: [],
                                content: 0:3-0:3 Identifier(value: "y")
                              ),
                              comma: SyntaxNode(
                                leadingTrivia: [],
                                content: 0:4-0:4 ()
                              )
                            ),
                            [2]: UndelimitedClosureParameter(
                              identifier: SyntaxNode(
                                leadingTrivia: [],
                                content: 0:5-0:5 Identifier(value: "z")
                              ),
                              comma: nil
                            )
                          ]
                        ),
                        inKeyword: SyntaxNode(
                          leadingTrivia: [
                            [0]: Whitespace(" ")
                          ],
                          content: 0:7-0:8 ()
                        ),
                        body: [
                          [0]: SyntaxNode(
                            leadingTrivia: [
                              [0]: Whitespace(" ")
                            ],
                            content: 0:10-0:10 ExprBlock.Element.expr(
                              Expr(
                                payload: Expr.Payload.identifier(
                                  Identifier(value: "x")
                                ),
                                annotation: EmptyAnnotation()
                              )
                            )
                          )
                        ],
                        closeBrace: SyntaxNode(
                          leadingTrivia: [],
                          content: 0:11-0:11 ()
                        )
                      )
                    ),
                    annotation: EmptyAnnotation()
                  )
                ),
                arguments: DelimitedSequence(
                  start: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:13-0:13 ()
                  ),
                  elements: [
                    [0]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 0:15-0:15 Expr(
                          payload: Expr.Payload.literal(
                            Literal.int32(1)
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 0:17-0:17 ()
                      )
                    ),
                    [1]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 0:19-0:19 Expr(
                          payload: Expr.Payload.literal(
                            Literal.int32(2)
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: SyntaxNode(
                        leadingTrivia: [],
                        content: 0:20-0:20 ()
                      )
                    ),
                    [2]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 0:22-0:22 Expr(
                          payload: Expr.Payload.literal(
                            Literal.int32(3)
                          ),
                          annotation: EmptyAnnotation()
                        )
                      ),
                      separator: nil
                    )
                  ],
                  end: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:24-0:24 ()
                  )
                )
              )
            ),
            annotation: EmptyAnnotation()
          )
        ),
        dot: SyntaxNode(
          leadingTrivia: [],
          content: 0:25-0:25 ()
        ),
        member: SyntaxNode(
          leadingTrivia: [],
          content: 0:26-0:36 Member.identifier(
            Identifier(value: "description")
          )
        )
      )
    ),
    annotation: EmptyAnnotation()
  )
)