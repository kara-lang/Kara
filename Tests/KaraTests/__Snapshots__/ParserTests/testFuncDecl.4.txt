SyntaxNode(
  leadingTrivia: [],
  content: 0:0-0:67 FuncDecl(
    modifiers: [
      [0]: SyntaxNode(
        leadingTrivia: [],
        content: 0:0-0:5 DeclModifier.access(AccessControl.public)
      )
    ],
    funcKeyword: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:7-0:10 ()
    ),
    identifier: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:12-0:12 Identifier(value: "f")
    ),
    parameters: DelimitedSequence(
      start: SyntaxNode(
        leadingTrivia: [],
        content: 0:13-0:13 ()
      ),
      elements: [
        [0]: DelimitedSequence.Element(
          content: SyntaxNode(
            leadingTrivia: [],
            content: 0:14-0:22 FuncDecl.Parameter(
              externalName: SyntaxNode(
                leadingTrivia: [],
                content: 0:14-0:14 Identifier(value: "x")
              ),
              internalName: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace(" ")
                ],
                content: 0:16-0:16 Identifier(value: "y")
              ),
              colon: SyntaxNode(
                leadingTrivia: [],
                content: 0:17-0:17 ()
              ),
              type: SyntaxNode(
                leadingTrivia: [
                  [0]: Whitespace(" ")
                ],
                content: 0:19-0:22 Expr.identifier(
                  Identifier(value: "Bool")
                )
              )
            )
          ),
          separator: nil
        )
      ],
      end: SyntaxNode(
        leadingTrivia: [],
        content: 0:23-0:23 ()
      )
    ),
    arrow: SyntaxNode(
      leadingTrivia: [
        [0]: Whitespace(" ")
      ],
      content: 0:25-0:33 FuncDecl.Arrow(
        arrowSymbol: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:25-0:26 ()
        ),
        returns: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:28-0:33 Expr.identifier(
            Identifier(value: "String")
          )
        )
      )
    ),
    body: ExprBlock(
      openBrace: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:35-0:35 ()
      ),
      elements: [
        [0]: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace(" ")
          ],
          content: 0:37-0:65 ExprBlock.Element.expr(
            Expr.ifThenElse(
              IfThenElse(
                ifKeyword: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 0:37-0:38 ()
                ),
                condition: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 0:40-0:40 Expr.identifier(
                    Identifier(value: "y")
                  )
                ),
                thenBlock: ExprBlock(
                  openBrace: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:42-0:42 ()
                  ),
                  elements: [
                    [0]: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:44-0:46 ExprBlock.Element.expr(
                        Expr.literal(
                          Literal.string("x")
                        )
                      )
                    )
                  ],
                  closeBrace: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:48-0:48 ()
                  )
                ),
                elseBranch: ElseBranch(
                  elseKeyword: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace(" ")
                    ],
                    content: 0:50-0:53 ()
                  ),
                  elseBlock: ExprBlock(
                    openBrace: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:55-0:55 ()
                    ),
                    elements: [
                      [0]: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 0:57-0:63 ExprBlock.Element.expr(
                          Expr.literal(
                            Literal.string("not x")
                          )
                        )
                      )
                    ],
                    closeBrace: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 0:65-0:65 ()
                    )
                  )
                )
              )
            )
          )
        )
      ],
      closeBrace: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace(" ")
        ],
        content: 0:67-0:67 ()
      )
    )
  )
)