Expr(
  payload: Expr.Payload.closure(
    Closure(
      openBrace: SyntaxNode(
        leadingTrivia: [],
        content: 0:0-0:0 ()
      ),
      parameters: [],
      inKeyword: nil,
      body: [
        [0]: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace("\n  ")
          ],
          content: 1:2-4:2 ExprBlock.Element.declaration(
            Declaration.enum(
              EnumDecl(
                modifiers: [],
                enumKeyword: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace("\n  ")
                  ],
                  content: 1:2-1:5 ()
                ),
                identifier: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 1:7-1:7 Identifier(value: "E")
                ),
                declarations: SyntaxNode(
                  leadingTrivia: [
                    [0]: Whitespace(" ")
                  ],
                  content: 1:9-4:2 DeclBlock(
                    openBrace: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace(" ")
                      ],
                      content: 1:9-1:9 ()
                    ),
                    elements: [
                      [0]: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace("\n    ")
                        ],
                        content: 2:4-2:9 Declaration.enumCase(
                          EnumCase(
                            modifiers: [],
                            caseKeyword: SyntaxNode(
                              leadingTrivia: [
                                [0]: Whitespace("\n    ")
                              ],
                              content: 2:4-2:7 ()
                            ),
                            identifier: SyntaxNode(
                              leadingTrivia: [
                                [0]: Whitespace(" ")
                              ],
                              content: 2:9-2:9 Identifier(value: "a")
                            ),
                            associatedValues: nil
                          )
                        )
                      ),
                      [1]: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace("\n    ")
                        ],
                        content: 3:4-3:16 Declaration.enumCase(
                          EnumCase(
                            modifiers: [],
                            caseKeyword: SyntaxNode(
                              leadingTrivia: [
                                [0]: Whitespace("\n    ")
                              ],
                              content: 3:4-3:7 ()
                            ),
                            identifier: SyntaxNode(
                              leadingTrivia: [
                                [0]: Whitespace(" ")
                              ],
                              content: 3:9-3:9 Identifier(value: "b")
                            ),
                            associatedValues: DelimitedSequence(
                              start: SyntaxNode(
                                leadingTrivia: [],
                                content: 3:10-3:10 ()
                              ),
                              elements: [
                                [0]: DelimitedSequence.Element(
                                  content: SyntaxNode(
                                    leadingTrivia: [],
                                    content: 3:11-3:15 Expr(
                                      payload: Expr.Payload.identifier(
                                        Identifier(value: "Int32")
                                      ),
                                      annotation: Type.constructor(
                                        Identifier(value: "Type"),
                                        []
                                      )
                                    )
                                  ),
                                  separator: nil
                                )
                              ],
                              end: SyntaxNode(
                                leadingTrivia: [],
                                content: 3:16-3:16 ()
                              )
                            )
                          )
                        )
                      )
                    ],
                    closeBrace: SyntaxNode(
                      leadingTrivia: [
                        [0]: Whitespace("\n  ")
                      ],
                      content: 4:2-4:2 ()
                    )
                  )
                )
              )
            )
          )
        ),
        [1]: SyntaxNode(
          leadingTrivia: [
            [0]: Whitespace("  ")
          ],
          content: 5:2-5:20 ExprBlock.Element.expr(
            Expr(
              payload: Expr.Payload.tuple(
                DelimitedSequence(
                  start: SyntaxNode(
                    leadingTrivia: [
                      [0]: Whitespace("  ")
                    ],
                    content: 5:2-5:2 ()
                  ),
                  elements: [
                    [0]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [],
                        content: 5:3-5:5 Expr(
                          payload: Expr.Payload.member(
                            MemberAccess(
                              base: SyntaxNode(
                                leadingTrivia: [],
                                content: 5:3-5:3 Expr(
                                  payload: Expr.Payload.identifier(
                                    Identifier(value: "E")
                                  ),
                                  annotation: Type.constructor(
                                    Identifier(value: "Type"),
                                    []
                                  )
                                )
                              ),
                              dot: SyntaxNode(
                                leadingTrivia: [],
                                content: 5:4-5:4 ()
                              ),
                              member: SyntaxNode(
                                leadingTrivia: [],
                                content: 5:5-5:5 Member.identifier(
                                  Identifier(value: "a")
                                )
                              )
                            )
                          ),
                          annotation: Type.constructor(
                            Identifier(value: "E"),
                            []
                          )
                        )
                      ),
                      separator: SyntaxNode(
                        leadingTrivia: [],
                        content: 5:6-5:6 ()
                      )
                    ),
                    [1]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 5:8-5:14 Expr(
                          payload: Expr.Payload.application(
                            FuncApplication(
                              function: SyntaxNode(
                                leadingTrivia: [
                                  [0]: Whitespace(" ")
                                ],
                                content: 5:8-5:10 Expr(
                                  payload: Expr.Payload.member(
                                    MemberAccess(
                                      base: SyntaxNode(
                                        leadingTrivia: [
                                          [0]: Whitespace(" ")
                                        ],
                                        content: 5:8-5:8 Expr(
                                          payload: Expr.Payload.identifier(
                                            Identifier(value: "E")
                                          ),
                                          annotation: Type.constructor(
                                            Identifier(value: "Type"),
                                            []
                                          )
                                        )
                                      ),
                                      dot: SyntaxNode(
                                        leadingTrivia: [],
                                        content: 5:9-5:9 ()
                                      ),
                                      member: SyntaxNode(
                                        leadingTrivia: [],
                                        content: 5:10-5:10 Member.identifier(
                                          Identifier(value: "b")
                                        )
                                      )
                                    )
                                  ),
                                  annotation: Type.arrow(
                                    [
                                      [0]: Type.constructor(
                                        Identifier(value: "Int32"),
                                        []
                                      )
                                    ],
                                    Type.constructor(
                                      Identifier(value: "E"),
                                      []
                                    )
                                  )
                                )
                              ),
                              arguments: DelimitedSequence(
                                start: SyntaxNode(
                                  leadingTrivia: [],
                                  content: 5:11-5:11 ()
                                ),
                                elements: [
                                  [0]: DelimitedSequence.Element(
                                    content: SyntaxNode(
                                      leadingTrivia: [],
                                      content: 5:12-5:13 Expr(
                                        payload: Expr.Payload.literal(
                                          Literal.int32(42)
                                        ),
                                        annotation: Type.constructor(
                                          Identifier(value: "Int32"),
                                          []
                                        )
                                      )
                                    ),
                                    separator: nil
                                  )
                                ],
                                end: SyntaxNode(
                                  leadingTrivia: [],
                                  content: 5:14-5:14 ()
                                )
                              )
                            )
                          ),
                          annotation: Type.constructor(
                            Identifier(value: "E"),
                            []
                          )
                        )
                      ),
                      separator: SyntaxNode(
                        leadingTrivia: [],
                        content: 5:15-5:15 ()
                      )
                    ),
                    [2]: DelimitedSequence.Element(
                      content: SyntaxNode(
                        leadingTrivia: [
                          [0]: Whitespace(" ")
                        ],
                        content: 5:17-5:19 Expr(
                          payload: Expr.Payload.member(
                            MemberAccess(
                              base: SyntaxNode(
                                leadingTrivia: [
                                  [0]: Whitespace(" ")
                                ],
                                content: 5:17-5:17 Expr(
                                  payload: Expr.Payload.identifier(
                                    Identifier(value: "E")
                                  ),
                                  annotation: Type.constructor(
                                    Identifier(value: "Type"),
                                    []
                                  )
                                )
                              ),
                              dot: SyntaxNode(
                                leadingTrivia: [],
                                content: 5:18-5:18 ()
                              ),
                              member: SyntaxNode(
                                leadingTrivia: [],
                                content: 5:19-5:19 Member.identifier(
                                  Identifier(value: "b")
                                )
                              )
                            )
                          ),
                          annotation: Type.arrow(
                            [
                              [0]: Type.constructor(
                                Identifier(value: "Int32"),
                                []
                              )
                            ],
                            Type.constructor(
                              Identifier(value: "E"),
                              []
                            )
                          )
                        )
                      ),
                      separator: nil
                    )
                  ],
                  end: SyntaxNode(
                    leadingTrivia: [],
                    content: 5:20-5:20 ()
                  )
                )
              ),
              annotation: Type.tuple(
                [
                  [0]: Type.constructor(
                    Identifier(value: "E"),
                    []
                  ),
                  [1]: Type.constructor(
                    Identifier(value: "E"),
                    []
                  ),
                  [2]: Type.arrow(
                    [
                      [0]: Type.constructor(
                        Identifier(value: "Int32"),
                        []
                      )
                    ],
                    Type.constructor(
                      Identifier(value: "E"),
                      []
                    )
                  )
                ]
              )
            )
          )
        )
      ],
      closeBrace: SyntaxNode(
        leadingTrivia: [
          [0]: Whitespace("\n")
        ],
        content: 6:0-6:0 ()
      )
    )
  ),
  annotation: Type.arrow(
    [],
    Type.tuple(
      [
        [0]: Type.constructor(
          Identifier(value: "E"),
          []
        ),
        [1]: Type.constructor(
          Identifier(value: "E"),
          []
        ),
        [2]: Type.arrow(
          [
            [0]: Type.constructor(
              Identifier(value: "Int32"),
              []
            )
          ],
          Type.constructor(
            Identifier(value: "E"),
            []
          )
        )
      ]
    )
  )
)