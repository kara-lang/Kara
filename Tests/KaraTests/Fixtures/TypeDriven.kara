protocol Monad {
  associatedtype element

  static func new(element) -> Self<element>

  func flatMap(_: element -> Self<newElement>) -> Self<newElement>
}

enum Result<value, error> {
  case success(_: value)
  case failure(_: error)
}

extension Result: Monad {
    typealias element = value

    static func new(_ v: value) { .success(v) }

    func flatMap(binder) = switch self {
        case .success(value):
            switch binder(value) {
                case .success(newValue):
                    .success(newValue)
                case .failure(error):
                    .failure(error)
            }
        case .failure(error):
            .failure(error)
    }
}

let x: Result<Int, Error> = do {
  let y = try blah()
  let z = try blah()

  return y + z
}

let x = blah().flatMap { y in
  blah().flatMap { z in
    y + z
  }
}

func square(a: Int) -> Int = multiply(a, a)

func factorial(Int) -> Int
factorial(0) = 1
factorial(n) = multiply(n, (n - 1))

func fill<Element>(count: Nat, e: Element) -> Vec<count, Element>

enum Nat {
    case zero
    case addOne(Nat)
}

enum Vec<count: Nat, element> {
    case empty -> Vec<.zero, element>
    case cons(element, Vec<count, element>) -> Vec<.addOne(count), element>
}

func allCounts(Vec<n, String>) -> Vec<n, Nat>
allCounts([]) = []
allCounts(.cons(str, rest)) = .cons(str.count, allCounts(rest))
