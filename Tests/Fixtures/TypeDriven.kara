trait Monad {
  type Element

  static func new(_: Element) -> Self(Element)

  func flatMap(_: Element -> Self(NewElement)) -> Self(NewElement)
}

enum Result(Value, Error) {
  case success(_: Value)
  case failure(_: Error)
}

extension Result: Monad {
    let Element: Type = Value

    static func new(_ v: Value) { .success(v) }

    func flatMap(binder: Value -> Result(NewValue)) -> Result(NewValue) {
        switch self {
        case .success(value):
            switch binder(value) {
                case .success(newValue):
                    .success(newValue)
                case .failure(error):
                    .failure(error)
            }
        case .failure(error):
            .failure(error)
        }
    }
}

let x: Result(Int, Error) = do {
  let y = try blah()
  let z = try blah()

  return y + z
}

let x = blah().flatMap { y in
  blah().flatMap { z in
    y + z
  }
}

func square(a: Int) -> Int { multiply(a, a) }

func factorial(i: Int) -> Int {
    if i == 0 {
        1
    } else {
        multiply(n, (n - 1))
    }
}

func fill(count: Nat, e: Element) -> Vec(count, Element)

enum Nat {
    case zero
    case addOne(Nat)
}

enum Vector(Count: Nat, Element) {
    case empty: Vector(.zero, Element)
    case cons(Element, Vector(Count, Element)) -> Vector(.addOne(Count), Element)
}

func allCounts(vector: [String; n]) -> [Nat; n] {
    switch vector {
    case .empty:
        .empty
    case let .cons(str, rest):
        .cons(str.count, allCounts(rest))
    }
}
